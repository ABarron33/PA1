



#include "My_vec.h"

My_vec::My_vec() : size(0), capacity(DEF_CAPACITY), 
	  ptr(new char[capacity]) 
{

}

    My_vec::~My_vec()
{
	    delete[] ptr;
}



My_vec::My_vec(const My_vec& vec)  
    	:size(vec.size),  capacity(vec.capacity),
	                ptr(new char[capacity])
{	
	 for(int i = 0; i < size; i++)
		  ptr[i] = vec.ptr[i];
}



My_vec& My_vec::operator=(const My_vec& vec) 
{
	if( this != &vec) //no self assignent
	{
		char *p = new char[vec.capacity];
		for(int i = 0; i < vec.size; i++)
		{
			p[i] = vec.ptr[i];  
		}
		delete[] ptr; 
		size = vec.size; 
		capacity = vec.capacity; 
		ptr = p;
	}
	return *this;
}




int My_vec::get_size() const
{
	return size;
}


int My_vec::get_capacity() const
{
	return capacity;
}


char& My_vec::operator[](int i) const
{
	return ptr[i];
}


char& My_vec::operator[](int i)
{
	return ptr[i];
}


bool My_vec::is_empty() const
{
	return (size == 0);
}


char& My_vec::elem_at_rank(int r) const
{
	if( (r < 0) || (r >= size) )
		throw out_of_range("index out of bound in elem_at_rank()");
	return ptr[r];
}


void My_vec::insert_at_rank(int r, const char& elem)
{
	if( r < 0 || r > size)
		throw out_of_range("index out of bound in insert_at_rank()");
	else if(size >=capacity) 
		resize(capacity * 2);
	
	for(int i = size; i > r; --i)
		ptr[i] = ptr[i-1];
	ptr[r] = elem;
	++size;
}


void My_vec::replace_at_rank(int r, const char& elem)
{
	if( (r < 0) || (r >= size) )
		throw out_of_range("index out of bound in replace_at_rank()");
	ptr[r] = elem;
} 

	
void My_vec::remove_at_rank(int r)
{
	if( (r < 0) || (r >= size) )
		throw out_of_range("index is out of bound in remove_at_rank()");
	
	for(int j = r; j < size-1; j++)
		ptr[j] = ptr[j+1];
	--size;
}



void My_vec::resize(int newalloc)
{ 
	if(newalloc <= capacity) return; 
	char* p = new char[newalloc];	 
	for(int i = 0; i < size; ++i)
		p[i] = ptr[i];
	if(ptr != nullptr) delete[] ptr;			
	ptr = p;	
	capacity = newalloc;
}
	
	
int find_max_index(const My_vec& v,int size)
{
	if(size <= 0)
		throw out_of_range("size not valid in find_max_index()");

	int max_index = v.get_size()-1;
	char max = v[max_index];
	
	for(int i = v.get_size()-1; i >= v.get_size()-size; --i)
	{
		if(v[i] > max)
		{
			max = v[i];
			max_index = i;
		} 
	}
	return max_index;
}




void sort_max(My_vec & vec)
{
	for(int i = vec.get_size(); i > 1; --i)
	{

		int max_index = find_max_index(vec, i);
		
		int old_index = vec.get_size() - i;
		
		
		char old_elem = vec.elem_at_rank(old_index);
		
		char max_elem = vec.elem_at_rank(max_index);
		
		
		vec.replace_at_rank(old_index, max_elem);
		
		vec.replace_at_rank(max_index, old_elem);
	}
	
}



ostream& operator<<(ostream& out, const My_vec& vec)
{
	for(int i = 0; i < vec.get_size(); ++i)
	{
		if(i == (vec.get_size()-1) )
			out << vec.elem_at_rank(i);
		else
			out << vec.elem_at_rank(i) << ", ";		
	}
	return out;
}
